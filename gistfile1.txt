{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment7.ipynb",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "jLIi55KNWDXD",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import cvxpy as cp\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sklearn\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "qPXa6o8oblrX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "LKyACEAUXPUa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "iris = datasets.load_iris()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "TpCqG2_LaQ64",
        "colab_type": "code",
        "outputId": "89e53c40-a22b-43ec-eee2-aa20e0679649",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "cell_type": "code",
      "source": [
        "print(iris.feature_names)\n",
        "print(iris.target_names)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n",
            "['setosa' 'versicolor' 'virginica']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "2HwKxw3faafX",
        "colab_type": "code",
        "outputId": "413802d3-cebc-40d5-e955-6255bc4fce36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "cell_type": "code",
      "source": [
        "X = iris.data[:, [0,3]].copy()\n",
        "tmp = iris.target.copy()\n",
        "tmp[tmp == 2] = -1\n",
        "tmp[tmp == 1] = -1\n",
        "tmp[tmp == 0] = 1\n",
        "y = tmp.copy()\n",
        "#  1 : setosa\n",
        "# -1 : not setosa\n",
        "print(np.unique(y))\n",
        "print(len(X))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-1  1]\n",
            "150\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "MjVFNv28cLv6",
        "colab_type": "code",
        "outputId": "6b63cbda-8e3d-4b52-e5d5-147bf0c6a269",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "setosa = X[y==1]\n",
        "not_setosa = X[y==-1]\n",
        "plt.scatter(setosa[:,0],setosa[:,1],c='b')\n",
        "plt.scatter(not_setosa[:,0],not_setosa[:,1],c='g')\n",
        "plt.xlabel('sepal length (cm)')\n",
        "plt.ylabel('petal width (cm)')\n",
        "a = []\n",
        "plt.show()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEKCAYAAAD9xUlFAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3X2UHXWd5/H3h+6MGJ0JzpAzykO6\nGWXcExGB9AEUH3CSdXlQmPHhiMZRlDnRjg/DOu6uM9lFE8046iioMwFbQInJMiqiy5M6EnXEZxOE\nhMDgooYIshoZDWB8IOG7f1T1Tadzb1fddFXdqns/r3PqdN+6dX/17eqb/ubW7/f9/RQRmJmZARzU\n6wDMzKw+nBTMzKzFScHMzFqcFMzMrMVJwczMWpwUzMysxUnBzMxanBTMzKzFScHMzFqGex1Atw49\n9NAYHR3tdRhmZo2yadOmn0fE/KzjGpcURkdH2bhxY6/DMDNrFEl35znOt4/MzKzFScHMzFqcFMzM\nrMVJwczMWpwUzMyspbSkIOlISV+WdLukrZL+us0xp0raKemWdLugrHjMzCxbmZ8UdgN/ExELgZOB\n10ta2Oa4myLiuHRbVWI8ZrW1fst6Ri8a5aCVBzF60Sjrt6wf6DiyNCXOJiqtTiEi7gPuS79/UNId\nwOHA7WWd06yJ1m9Zz7Jrl7Hr4V0A3L3zbpZduwyApU9dOnBxZGlKnE1VSZ+CpFHgeODbbZ5+uqRb\nJX1O0lOqiMesTlZsWNH6Azdp18O7WLFhxUDGkaUpcTZV6RXNkh4LfBo4PyIemPb0zcBIRDwk6Qzg\ns8DRbdpYBiwDWLBgQckRm1Vr+87tXe3v9ziyNCXOpir1k4KkOSQJYX1EXD39+Yh4ICIeSr+/AZgj\n6dA2x01ExFhEjM2fnzl1h1mjLJjX/j86nfb3exxZmhJnU5U5+kjAZcAdEfH+Dsc8Pj0OSSem8dxf\nVkxmdbR68Wrmzpm7z765c+ayevHqgYwjS1PibKoybx+dAvwlsEXSLem+vwMWAETEJcCLgXFJu4Ff\nA+dERJQYk1ntTHaOrtiwgu07t7Ng3gJWL15deadpXeLI0pQ4m0pN+xs8NjYWniXVzKw7kjZFxFjW\nca5otr7WlPHsdYmzLnFY7zRuPQWzvJoynr0ucdYlDust3z6yvjV60Sh379x/XZGReSNsO39b9QF1\nUJc46xKHlcO3j2zgNWU8e13irEsc1ltOCta3mjKevS5x1iUO6y0nBetbTRnPXpc46xKH9ZaTgvWt\npU9dysQLJhiZN4IQI/NGmHjBRO06TesSZ13isN5yR7OZ2QBwR7NZjRQx/r+KGoKsc+SJYfn1yxle\nNYxWiuFVwyy/fnnhcTZFE6+F6xTMSlbE+P8qagiyzpEnhuXXL+fijRe32twTe1qP15y5ppA4m6Kp\n18K3j8xKVsT4/ypqCLLOkSeG4VXD7Ik9+x0zpCF2X7C7kDibom7XwrePzGqiiPH/VdQQZJ0jTwzt\n/gjOtL+fNfVaOCmYlayI8f9V1BBknSNPDEMaantMp/39rKnXwknBrGRFjP+vooYg6xx5Yli2aFnb\ntjvt72dNvRZOCmYlK2L8fxU1BFnnyBPDmjPXMD423vrf8JCGGB8br3XHalmaei3c0WxmNgDc0WzW\nZ4qoIbBqNfF34joFswYooobAqtXU34lvH5k1QBE1BFatuv1OfPvIrI8UUUNg1Wrq78RJwawBiqgh\nsGo19XfipGDWAEXUEFi1mvo7cVIwa4AiagisWk39nbij2cxsALij2czMuuakYNYQTVlkZ7ZxNqXg\nqylxdsvFa2YN0JRFdmYbZ1MKvpoS54Fwn4JZAzRlkZ3Zxlm3gq9OmhLnVO5TMOsjTVlkZ7ZxNqXg\nqylxHggnBbMGaMoiO7ONsykFX02J80A4KZg1QFMW2ZltnE0p+GpKnAfCScGsAZqyyM5s42xKwVdT\n4jwQpXU0SzoSWAv8MRDARER8YNoxAj4AnAHsAs6NiJtnatcdzWZm3atDR/Nu4G8iYiFwMvB6SQun\nHXM6cHS6LQMuLjEea5gqxsT3k+XXL2d41TBaKYZXDbP8+uW9DmngFfH+rPo9XlqdQkTcB9yXfv+g\npDuAw4Hbpxx2NrA2ko8r35J0iKQnpK+1AVbFmPh+svz65Vy8ce//qfbEntbjuq8J3K+KeH/24j1e\nSZ2CpFHgq8AxEfHAlP3XAf8QEV9LH28A/kdEdLw/5NtHg6GKMfH9ZHjVMHtiz377hzTE7gt29yAi\nK+L9WeR7vA63jyYDeSzwaeD8qQmhyzaWSdooaeOOHTuKDdBqqYox8f2kXUKYab+Vr4j3Zy/e46Um\nBUlzSBLC+oi4us0h9wJHTnl8RLpvHxExERFjETE2f/78coK1WqliTHw/GdJQV/utfEW8P3vxHi8t\nKaQjiy4D7oiI93c47BrglUqcDOx0f4JBNWPi+8myRcu62m/lK+L92Yv3eJmfFE4B/hL4M0m3pNsZ\nkl4n6XXpMTcAPwTuAj4CeLiEAdWMie8na85cw/jYeOuTwZCGGB8bdydzDxXx/uzFe9wT4pmZDYDa\ndDSb9VJTxu67JqN6vp7teT0F61tNGbvvmozq+Xp25ttH1reaMnbfNRnVG8Tr6dtHNvCaMnbfNRnV\n8/XszEnB+lZTxu67JqN6vp6dOSlY32rK2H3XZFTP17MzJwXrW00Zu++ajOr5enbmjmYzswHgjmaz\nnLJqGbLGsxdRY5CnnqKIOLI0Zex+FddiUPmTgg206bUMkyZvM00fzw7JvefJWw1Zz8P+Y+KnH5MV\nQ5428sSRpYg2qlDFtehHeT8pOCnYQMuqZcgaz15EjUGeeooi4sjSlLH7VVyLfuTbR2Y5ZNUyZI1n\nL6LGIE89RRFxZGnK2P0qrsUgy5UUJD1O0lMk/YkkJxLrG1m1DFnj2YuoMchTT1FEHFmaMna/imsx\nyDr+gZc0T9LfSdoCfAv4MPBJ4G5Jn5L03KqCNCtLVi1D1nj2ImoM8tRTFBFHlqaM3a/iWgy0iGi7\nAV8kWQ/hkDbPLQIuAs7r9PqytkWLFoVZkcavG4+hlUPB24mhlUMxft34Ps+v27wuRi4cCb1dMXLh\nSKzbvK6r5/MckxVDUXFkKaKNKlRxLfoNsDFy/I11R7OZ2QAotKNZ0rGSzpL0wslt9iHagfIYbCuL\n31uWuZ6CpMuBY4GtwCPp7gCuLjEu68DzwFtZ/N4yyFGnIOn2iFhYUTyZBv32kcdgW1n83upvRd4+\n+qak2iSFQecx2FYWv7cM8iWFtSSJ4U5JmyVtkbS57MCsPY/BtrL4vWWQLylcRjI09TTgBcDz06/W\nAx6DbWXxe8sgR0czsCMirik9EstlssNvxYYVbN+5nQXzFrB68Wp3BNqs+b1lkK+jeQ1wCHAt8NvJ\n/RHRk9FHg97RbGZ2IIrsaH40STJ4Hslto8lbSGYDIc9aB7Pl+oDu+HqVJ/P2UUS8uopAzOpo+loH\ne2JP63FRy3q6PqA7vl7lyvykIOkKSYdMefy4tKDNrO9NbJroav+BWLFhxT4LwgDsengXKzasKOwc\n/cTXq1x5bh8dGxG/nHwQEb8Aji8vJLP6yLPWwWy5PqA7vl7lypMUDpL0uMkHkv6QfKOWzBovz1oH\ns+X6gO74epUrT1J4H0nx2jskvQP4BvCecsMyq4c8ax3MlusDuuPrVa7MpBARa4EXAj9NtxdGxMfL\nDsysDtacuYbxsfHWJ4MhDTE+Nl5YJzMknaMTL5hgZN4IQozMGxn4ReZn4utVro51CpIeGxEPzfji\nHMcUzXUKZmbdK6JO4f9Iep+kZ0t6zJSG/0TSeZK+QDL1RacALpf0M0m3dXj+VEk7Jd2SbhdkBWtm\nZuXqmBQiYjGwAXgtsFXSA5LuB9YBjwdeFRFXzdD2x5ghaaRuiojj0m1Vd6Fb3c22wKiqAqWs8xRR\nvFbEObLaKOJ61aUN650ZRxFFxA3ADQfScER8VdLogbzWmm+2BUZVFShlnaeI4rUizpHVRhHXqy5t\nWG+VukZzmhSui4hj2jx3KvBp4B7gJ8BbImJrVpvuU2iG2S7YUtWCL1nnGV413LYmYUhD7L5gd2Xn\nyGqjiOtVlzasHHn7FHpZb3AzMBIRD0k6A/gscHS7AyUtA5YBLFjgschNMNsCo6oKlLLOU0TxWhHn\nyGqjiOtVlzast/LUKZQiIh6YHLmU3qaaI+nQDsdORMRYRIzNnz+/0jjtwMy2wKiqAqWs8xRRvFbE\nObLaKOJ61aUN661cSUHSkKTDJC2Y3GZ7YkmPl6T0+xPTWO6fbbtWD7MtMKqqQCnrPEUUrxVxjqw2\nirhedWnDeiwiZtyANwI/B7YCW9Jtc47XXQncBzxM0m9wHvA64HXp829I27wV+BbwjKw2I4JFixaF\nNcO6zeti5MKR0NsVIxeOxLrN6yp9fVHnGb9uPIZWDgVvJ4ZWDsX4deM9OUdWG0Vcr7q0YcUDNkaO\nv7F5Ftm5CzgpImrxv3h3NJuZda/IRXZ+DOycfUjWJB5rnt+StUvQSrW2JWuX9DqktvL8TptSC2Hl\nmWmaizen3z4FeDJwPfsux/n+0qNrw58Uyjd9rDkk94U9v8z+lqxdwoYfbdhv/+KjFnPjK2/sQUTt\n5fmdZh1TxPvC763eyftJYaak8LYZXhfRowpkJ4Xyeax5flqpjs/F28qrAepWnt9pU2oh7MDMuk4h\nIlamDb0kIj41rfGXzD5EqyuPNe8/eX6nTamFsHLl6VP425z7rE94rHn/yfM7bUothJWrY1KQdLqk\nDwGHS/rglO1jQL76fmskjzXPb/FRi7va3yt5fqdNqYWwcs30SeEnwCbgN+nXye0a4L+UH5r1ihcx\nye/GV964XwKoWycz5PudZh1TxPvC7636y1OnMCciHq4onkzuaDYz696s6xQkbZG0GdgkafP0rdBo\nbSBlrSGQZ/x/HWoEqhr/35T1KazZZhqSOpJ++/r06+S6zK8gGZL61pJja8ufFPrD9DUEJk2uf5xn\n/H8dagSqGv8/2/H9rg+wWdcpTGnoexFx/LR9N0fECbOM8YA4KfSHrDUE8oz/r0ONQFXj/5uyPoXV\nV5HTXEjSKVMePCPn68w6KmKdgjqoavx/U9ansObL88f9PGCNpG2S7gbWAK8pNyzrd0WsU1AHVY3/\nb8r6FNZ8mUkhIjZFxNOApwHHRsRxEXFz+aFZP8taQyDP+P861AhUNf6/KetTWPPNNProFenXN6eT\n450HnDflsdkBW3PmGsbHxlufDIY01Opkhnzj/+tQI1DV+P/Zju93fYDlNdPoo9dGxIc7TYw3OTdS\n1dzRbGbWvVl3NEfEh9Nv3x0RK6dvhUVqA6uKufmzaiGK4PH/1k86zpI6xW2SfgrclG5fiwgvumOz\nMn3c/N0772bZtUl/woHOzT+9jem1EHtiT+vx5G2qOvwcZnWSWacAIGkB8CzgFOAM4JcRcVzJsbXl\n20f9oYq5+bNqIYrg8f/WFLNeT2FKQ0eQJINnkYxA2gp8bdYR2kCrYm7+KmohPP7f+k2eOoXtwPnA\n5yLi6RFxZkS8q+S4rM9VMTd/FbUQHv9v/SZPUjgeWAu8XNI3Ja2VdF7JcVmfq2Ju/qxaiCJ4/L/1\nmzzFa7cCVwAfBb4EPAe4oOS4rM9VMTd/Vi1EXX4OszrJMyHeRuBRwDdIRyBFxP49axVxR7OZWfeK\nnBDv9Ih4akS8NiLW9TIhWDHqMq6+iDUGzKxYmaOPImJHFYFYNeoyrj4rjrrEaTZoctUp1IlvH81O\nXcbVF7HGgJnlV+TtI+sjdRlXX8QaA2ZWvI63jyS9cKYXRsTVxYdjZVswb0Hb/4FXPa4+K466xGk2\naGb6pPCCGbbnlx+alaEu4+qLWGPAzIrX8ZNCRLy6ykCsGpOdtCs2rGD7zu0smLeA1YtXV955mxVH\nXeI0GzR5J8Q7E3gKcPDkvohYVWJcHbmj2cyse4V1NEu6BHgp8EZAwEuAkRyvu1zSzyTd1uF5Sfqg\npLskbZZ0QlablqjDGgJFqGI9hSrOYdZP8qyn8IyIOFbS5ohYKel9wOdyvO5jwD+RzJvUzunA0el2\nEnBx+tVmUIc1BIpQxXoKVZzDrN/kmebi2xFxkqRvAS8E7ge2RsSTMhuXRoHrIuKYNs99GPhKRFyZ\nPr4TODUi7pupzUG/fVSHNQSKUMV6ClWcw6wpiqxTuE7SIcB7gZuBbcCVswsPgMOBH095fE+6bz+S\nlknaKGnjjh2DXWBdhzUEilDFegpVnMOs3+RJCu+JiF9GxKdJ+hL+E/DOcsPaV0RMRMRYRIzNnz+/\nylPXTh3WEChCFespVHEOs36TJyl8c/KbiPhtuj7zN2c4Pq97gSOnPD4i3WczqMMaAkWoYj2FKs5h\n1m86JgVJj5e0CHi0pOMlnZBupwJzO72uC9cAr0xHIZ0M7MzqT7B6rCFQhCrWU6jiHGb9pmNHs6RX\nAecCY8DUnt0HgCuyprmQdCVwKnAo8FPgbcAcgIi4RJJIRiedBuwCXh0RmT3Ig97RbGZ2IPJ2NM9U\n0XwFcIWkF6X9CV2JiJdlPB/A67tt18zMypOnT+Hrki6T9DkASQu9RrOZWX/KkxQ+CnwBOCx9/H3g\n/NIiMjOznsmTFA6NiE8CjwBExG6gXoPezcysEHmSwq8k/REQAJMjhUqNyszMeiLP3EdvJhk++kRJ\nXwfmAy8uNSozM+uJzKQQETdLeg7wZJJZUu+MiIdLj8zMzCqXmRQkHQwsB55JcgvpJkmXRMRvyg7O\nzMyqlef20VrgQeBD6eOXAx8nWVfBzMz6SJ6kcExELJzy+MuSbi8rIDMz6508o49uTkccASDpJPad\n9sLMzPpEnk8Ki4BvSJqcQH4BcKekLSSzVRxbWnRmZlapPEnhtNKjMDOzWsgzJHX/tQjNzKwv5elT\nMDOzAeGkYGZmLU4KZmbW4qRgZmYtTgpmZtbipGBmZi1OCmZm1uKkYGZmLU4KZmbW4qRgZmYtTgpm\nZtbipNCH1q+H0VE46KDk6/r1vY7IzJoizyyp1iDr18OyZbBrV/L47ruTxwBLl/YuLjNrBn9S6DMr\nVuxNCJN27Ur2m5llcVLoM9u3d7ffzGwqJ4U+s2BBd/vNzKZyUugzq1fD3Ln77ps7N9lvZpbFSaHP\nLF0KExMwMgJS8nViwp3MZpZPqUlB0mmS7pR0l6S3tnn+XEk7JN2Sbn9VZjyDYulS2LYNHnkk+eqE\nYGZ5lZYUJA0B/wycDiwEXiZpYZtDPxERx6XbpWXFY3u5jsHMOimzTuFE4K6I+CGApH8BzgZuL/Gc\nlsF1DGY2kzJvHx0O/HjK43vSfdO9SNJmSVdJOrLEeAzXMZjZzHrd0XwtMBoRxwJfBK5od5CkZZI2\nStq4Y8eOSgPsN65jMLOZlJkU7gWm/s//iHRfS0TcHxG/TR9eCixq11BETETEWESMzZ8/v5RgB4Xr\nGMxsJmUmhe8CR0s6StLvAecA10w9QNITpjw8C7ijxHgM1zGY2cxKSwoRsRt4A/AFkj/2n4yIrZJW\nSTorPexNkrZKuhV4E3BuWfFYwnUMZjYTRUSvY+jK2NhYbNy4sddhmJk1iqRNETGWdVyvO5qtBFl1\nCMuXw/Bw8klheDh5XIYlS5JzTG5LlhR/DtdcmBUsIhq1LVq0KKyzdesi5s6NgL3b3LnJ/oiI8fF9\nn5vcxseLjWPx4vbnWby4uHNk/axmthewMXL8jfXtoz4zOpoUpE03MpJMeTE8DHv27P/80BDs3l1c\nHFLn54p6y2X9rGa2l28fDaisOoR2CWGm/XXmmguz4jkp9JmsOoShofbPd9pfZ665MCuek0KfyapD\nmJznaLpO+w/U4sXd7T8QrrkwK56TQp/JqkNYswbGx/d+MhgaSh6vWVNsHDfeuH8CWLw42V8U11yY\nFc8dzWZmA8AdzSXIGhNfxJj5Ktqoqk6hCq5TMCtYnnGrddp6VaeQNSa+iDHzVbRRVZ1CFVynYJYf\nrlMoVtaY+CLGzFfRRlV1ClVwnYJZfnlvHzkp5HTQQe2LrqRkLeSs54s4RxFtVFFUVpUirpfZoHCf\nQsGyxsQXMWa+ijZcp2BmM3FSyClrTHwRY+araKOqOoUquE7BrAR5Oh7qtPVyQrx16yJGRiKk5Ov0\nDs2s54s4RxFtjI9HDA0lHbNDQ83sZJ5UxPUyGwS4o9nMzCa5T8HMzLrmpDDFbBeFyfP6rMKxIto4\n/PB92zj88OLPkadoLKuNKoroXNxm1qU895jqtJXVpzDbRWHyvD6rcKyINg47rP3zhx1W3DnyFI1l\ntVFFEZ2L28z2wn0K3Znt+P08r88qHKuijSLOkadoLKuNKoroXNxmtpf7FGqoiAVuqlgkJ+sceRa3\nyWqjip/Di/CYdc9JoUJFFI5VUXyWdY48RWNZbVTxc7i4zax7Tgqp2S4Kk+f1WYVjRbRx2GHtn5/c\nX8Q58hSNZbVRRRGdi9vMDkCejoc6bWUWr03vhM3bydzN67MKx4poY3pn82Qnc5HnyFM0ltVGFUV0\nLm4zS+COZjMzm+SO5mmaMl69iPH/VcVhZn0oz8eJOm0HcvuoKePVixj/X1UcZtYs+PbRXk0Zr17E\n+P+q4jCzZvHtoymaMl69iPH/VcVhZv1pIJJCU8arFzH+v6o4zKw/DURSaMp49SLG/1cVh5n1p4FI\nCkuXwsREck9cSr5OTCT76yRPnGvWwPj4vpXB4+PJ/irjMLP+VGpHs6TTgA8AQ8ClEfEP055/FLAW\nWATcD7w0IrbN1KbrFMzMutfzjmZJQ8A/A6cDC4GXSVo47bDzgF9ExJOAC4F3lxWPmZllK/P20YnA\nXRHxw4j4HfAvwNnTjjkbuCL9/ipgsTTT5M5mZlamMpPC4cCPpzy+J93X9piI2A3sBP6oxJjMzGwG\njeholrRM0kZJG3fs2NHrcMzM+laZSeFe4Mgpj49I97U9RtIwMI+kw3kfETEREWMRMTZ//vySwjUz\nszKTwneBoyUdJen3gHOAa6Ydcw3wqvT7FwNfiqbNu2Fm1kfKHpJ6BnARyZDUyyNitaRVJBMzXSPp\nYODjwPHAfwDnRMQPM9rcAbSZmadShwI/73EMeTjOYjnOYjnOYmXFORIRmbdaGjchXh1I2phnvG+v\nOc5iOc5iOc5iFRVnIzqazcysGk4KZmbW4qRwYCZ6HUBOjrNYjrNYjrNYhcTpPgUzM2vxJwUzM2tx\nUpiBpCFJ35N0XZvnzpW0Q9It6fZXvYgxjWWbpC1pHPtNIavEByXdJWmzpBNqGuepknZOuaYX9CjO\nQyRdJenfJd0h6enTnq/L9cyKs+fXU9KTp5z/FkkPSDp/2jE9v5454+z59Uzj+K+Stkq6TdKV6dD+\nqc8/StIn0uv5bUmj3bQ/XGSwfeivgTuAP+jw/Cci4g0VxjOT50ZEpzHKpwNHp9tJwMXp116YKU6A\nmyLi+ZVF094HgM9HxIvTwstpSw7V5npmxQk9vp4RcSdwHLRmTr4X+My0w3p+PXPGCT2+npIOB94E\nLIyIX0v6JElh8MemHNaafVrSOSSzT7807zn8SaEDSUcAZwKX9jqWApwNrI3Et4BDJD2h10HVkaR5\nwLOBywAi4ncR8ctph/X8euaMs24WAz+IiOnFpz2/ntN0irMuhoFHp1MDzQV+Mu35Wc0+7aTQ2UXA\nfwcemeGYF6Ufd6+SdOQMx5UtgH+VtElSu4U588xYW4WsOAGeLulWSZ+T9JQqg0sdBewAPpreOrxU\n0mOmHVOH65knTuj99ZzqHODKNvvrcD2n6hQn9Ph6RsS9wD8C24H7gJ0R8a/TDpvV7NNOCm1Iej7w\ns4jYNMNh1wKjEXEs8EX2ZuZeeGZEnEDyMfz1kp7dw1hmkhXnzSSl+E8DPgR8tuoASf4XdgJwcUQc\nD/wKeGsP4siSJ846XE8A0ttbZwGf6lUMeWTE2fPrKelxJJ8EjgIOAx4j6RVFnsNJob1TgLMkbSNZ\nHOjPJK2bekBE3B8Rv00fXkqypGhPpP97ICJ+RnIf9MRph+SZsbZ0WXFGxAMR8VD6/Q3AHEmHVhzm\nPcA9EfHt9PFVJH98p6rD9cyMsybXc9LpwM0R8dM2z9Xhek7qGGdNrucS4EcRsSMiHgauBp4x7Zhc\ns0934qTQRkT8bUQcERGjJB8lvxQR+2Tjafc8zyLpkK6cpMdI+v3J74HnAbdNO+wa4JXpKI+TST5y\n3le3OCU9fvLep6QTSd6fud/MRYiI/wf8WNKT012LgdunHdbz65knzjpczyleRudbMj2/nlN0jLMm\n13M7cLKkuWksi9n/b8+sZp/26KMuaMoMr8CbJJ0F7CaZ4fXcHoX1x8Bn0vfqMPC/I+Lzkl4HEBGX\nADcAZwB3AbuAV9c0zhcD45J2A78mmTW3F9WVbwTWp7cSfgi8uobXM0+ctbie6X8C/jPw2in7anc9\nc8TZ8+sZEd+WdBXJrazdwPeAiWl/my4DPi7pLtLZp7s5hyuazcysxbePzMysxUnBzMxanBTMzKzF\nScHMzFqcFMzMrMVJwQZaOvNlu1lw2+4v4Hx/LmnhlMdfkZS5rq6kJxQRj6T5kj4/23asfzkpmFXr\nz4GFmUft783AR2Z78ojYAdwn6ZTZtmX9yUnBai2thL4+nYTsNkkvTfcvkvRv6eR6X5isME//5/0B\nJfPd35ZWniLpREnfTCeP+8aUSuC8MVwu6Tvp689O958r6WpJn5f0fyW9Z8przpP0/fQ1H5H0T5Ke\nQVL9/t40viemh78kPe77kp7VIYwXAZ9P2x6S9I/pz7dZ0hvT/dskvStte6OkE9Jr84PJIqzUZ4Gl\neX9+GyyuaLa6Ow34SUScCcmU0ZLmkExIdnZE7EgTxWrgNelr5kbEcUom3LscOAb4d+BZEbFb0hLg\n70n+0OaxgmSqgNdIOgT4jqQb0+eOA44HfgvcKelDwB7gf5HMRfQg8CXg1oj4hqRrgOsi4qr05wEY\njogTJZ0BvI1kfpsWSUeRzI8/OdfWMmAUOC79ef5wyuHb05/9QpI59k8BDiaZUuSS9JiNwDtz/uw2\nYJwUrO62AO+T9G6SP6Y3STqG5A/9F9M/qkMk0whPuhIgIr4q6Q/SP+S/D1wh6WiSKbzndBHD80gm\nSHxL+vhgYEH6/YaI2Akg6XbwPn/JAAAB8UlEQVRgBDgU+LeI+I90/6eAP52h/avTr5tI/thP9wSS\nabInLQEuSadFZvI8qWvSr1uAx0bEg8CDkn4r6ZB0zYWfkcywabYfJwWrtYj4vpLlGc8A3ilpA8kM\nq1sj4umdXtbm8TuAL0fEXyhZnvArXYQh4EXp6lx7d0onkXxCmLSHA/s3NdlGp9f/miQRddPWI9Ni\ne2RK2wenbZrtx30KVmuSDgN2RcQ64L0kt2TuBOYrXZNY0hztu+DJZL/DM0lm3NxJMn3w5HTM53YZ\nxheAN6azUiLp+Izjvws8R9LjlExdPPU21YMkn1q68X32/QTxReC1adtMu32Ux5+y/0y6ZoCTgtXf\nU0nu4d9Ccr/9nRHxO5IZK98t6VbgFvadU/43kr5Hcg/9vHTfe4B3pfu7/d/8O0huN22WtDV93FG6\nbsTfA98Bvg5sI1n9CpL1Of5b2mH9xPYt7Nfer4AfSHpSuutSkimUN6c//8u7+3F4LnB9l6+xAeFZ\nUq2vSPoK8JaI2NjjOB4bEQ+l/5v/DHB5RLRbCD5ve38BLIqI/1lAbF8l6aT/xWzbsv7jTwpm5Xh7\n+unmNuBHzHLpxjShbJttUJLmA+93QrBO/EnBzMxa/EnBzMxanBTMzKzFScHMzFqcFMzMrMVJwczM\nWpwUzMys5f8DvAB4hmhZAIkAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "tj33lOn7oKU0",
        "colab_type": "code",
        "outputId": "e6001f59-1723-4992-e090-75b4b14a13d5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "cell_type": "code",
      "source": [
        "w1 = cp.Variable()\n",
        "w2 = cp.Variable()\n",
        "b = cp.Variable()\n",
        "\n",
        "x1 = cp.Constant(train_X[:,0])\n",
        "x2 = cp.Constant(train_X[:,1])\n",
        "yi = cp.Constant(train_y)\n",
        "\n",
        "\n",
        "constraints = [(cp.multiply(yi, x1*w1+x2*w2+b) - 1 ) >=0]\n",
        "\n",
        "obj = cp.Minimize(0.5*(w1**2 + w2**2))\n",
        "problem = cp.Problem(obj, constraints)\n",
        "\n",
        "problem.solve()\n",
        "print(problem.value)\n",
        "print(w1.value, w2.value, b.value)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "12.484739667334061\n",
            "-0.00013619986388517492 -4.996946999530585 3.9978671324797594\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "outputId": "73531571-6ce4-4306-f16b-3e9c9408394b",
        "id": "xGoaXGQh6CFM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "setosa = X[y==1]\n",
        "not_setosa = X[y==-1]\n",
        "\n",
        "#setosa = train_X[train_y==1]\n",
        "#not_setosa = train_X[train_y==-1]\n",
        "\n",
        "t1, t2 = setosa[0,0], setosa[0,1]\n",
        "breq = -(w1.value*t1 + w2.value*t2)\n",
        "if breq > b.value:\n",
        "    greater_flag = True\n",
        "else:\n",
        "    greater_flag = False\n",
        "\n",
        "if greater_flag:\n",
        "    seto = [-(w1.value*t[0] + w2.value*t[1]) for t in setosa]\n",
        "    low = min(seto)\n",
        "    \n",
        "    nots = [-(w1.value*t[0] + w2.value*t[1]) for t in not_setosa]\n",
        "    high = max(nots)\n",
        "else:\n",
        "    seto = [-(w1.value*t[0] + w2.value*t[1]) for t in setosa]\n",
        "    high = max(seto)\n",
        "    \n",
        "    nots = [-(w1.value*t[0] + w2.value*t[1]) for t in not_setosa]\n",
        "    low = min(nots)\n",
        "\n",
        "plt.scatter(setosa[:,0],setosa[:,1],c='b')\n",
        "plt.scatter(not_setosa[:,0],not_setosa[:,1],c='g')\n",
        "plt.xlabel('sepal length (cm)')\n",
        "plt.ylabel('petal width (cm)')\n",
        "a1 = [4+i*0.4 for i in range(11)]\n",
        "a2 = [(-b.value - w1.value * a1[i])/w2.value for i in range(len(a1))]\n",
        "plt.plot(a1,a2,c='k')\n",
        "a3 = [(-low - w1.value * a1[i])/w2.value for i in range(len(a1))]\n",
        "a4 = [(-high - w1.value * a1[i])/w2.value for i in range(len(a1))]\n",
        "plt.plot(a1,a3,'--',c='m')\n",
        "plt.plot(a1,a4,'--',c='m')\n",
        "plt.show()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "ltEI9oNYoWvv",
        "colab_type": "code",
        "outputId": "c1df91b9-4117-4b19-eeec-d806a0a7a18d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 538
        }
      },
      "cell_type": "code",
      "source": [
        "constraints[0].dual_value"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-3.13776600e-18,  0.00000000e+00, -1.43671892e-18,  2.00476715e-18,\n",
              "        2.94791632e-18,  0.00000000e+00,  1.50399784e-18, -2.22083874e-18,\n",
              "        9.62326595e-19,  1.85069895e-18,  1.99130914e-18,  1.92499590e-18,\n",
              "        0.00000000e+00,  0.00000000e+00,  8.91110115e-19,  8.27792605e-01,\n",
              "        0.00000000e+00,  0.00000000e+00,  1.82308246e-19, -2.67408149e-18,\n",
              "        0.00000000e+00, -1.01338965e-18,  0.00000000e+00,  0.00000000e+00,\n",
              "        0.00000000e+00,  7.07076033e-03, -2.22083874e-18, -2.40581649e-18,\n",
              "       -7.54780553e-18,  3.64661286e+00,  1.81431869e-18,  2.00476715e-18,\n",
              "        9.62326595e-19, -3.77390277e-18,  2.06235665e-18,  0.00000000e+00,\n",
              "        8.44254158e-19,  0.00000000e+00, -3.13776600e-18, -1.55246576e-18,\n",
              "        0.00000000e+00, -4.37461895e-19,  0.00000000e+00,  1.99130914e-18,\n",
              "        9.53267015e-03, -1.78222023e-18,  0.00000000e+00, -1.31238569e-18,\n",
              "        0.00000000e+00,  3.64661286e+00,  0.00000000e+00,  9.62326595e-19,\n",
              "        9.62326595e-19,  1.74984758e-18,  0.00000000e+00,  1.96389308e-18,\n",
              "        0.00000000e+00,  9.62326595e-19,  1.24949790e+01,  0.00000000e+00,\n",
              "        1.13217083e-17,  1.67413796e-18,  1.92499590e-18, -1.97236370e-18,\n",
              "        0.00000000e+00, -1.31238569e-18,  2.94791632e-18,  5.30045776e-19,\n",
              "        2.40624488e-18,  1.60444890e-18, -3.13776600e-18,  2.26434166e-18,\n",
              "        2.94791632e-18,  0.00000000e+00,  0.00000000e+00,  2.61480500e-18,\n",
              "       -1.69873342e-18,  0.00000000e+00,  1.02368984e-18, -1.97236370e-18,\n",
              "       -1.48088183e-18,  2.32869864e-18, -6.87602039e-19,  0.00000000e+00,\n",
              "        0.00000000e+00,  1.67413796e-18, -1.63132568e-18,  0.00000000e+00,\n",
              "        9.82427992e-03, -1.85069895e-18, -1.97236370e-18,  0.00000000e+00,\n",
              "       -1.09384948e-18, -8.74923790e-19,  9.07906940e-19,  2.06235665e-18,\n",
              "        1.58249146e-18, -1.72406271e-18, -7.54780553e-18,  4.34764905e+00,\n",
              "        2.87343784e-18,  1.60444890e-18,  0.00000000e+00,  2.87343784e-18,\n",
              "        1.96389308e-18,  0.00000000e+00,  1.56112718e-18,  1.81431869e-18,\n",
              "        0.00000000e+00,  0.00000000e+00,  2.10079007e-18,  7.51998918e-19,\n",
              "        0.00000000e+00,  0.00000000e+00,  8.91110115e-19, -1.57789096e-18,\n",
              "        1.96389308e-18, -1.65942429e-18,  0.00000000e+00, -1.62702455e-18])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "metadata": {
        "id": "OdRdLkdQqg_h",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "aXArPbOx23lz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "outputId": "0d5a17b0-7432-4862-dde6-e423f185e38b"
      },
      "cell_type": "code",
      "source": [
        "clf = SVC(kernel='linear',random_state=42, tol=1e-5)\n",
        "clf.fit(X,y)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto_deprecated',\n",
              "  kernel='linear', max_iter=-1, probability=False, random_state=42,\n",
              "  shrinking=True, tol=1e-05, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "metadata": {
        "id": "A4mdn49X3YQD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "907cb67a-fc50-46f1-825c-0ef71a0ee219"
      },
      "cell_type": "code",
      "source": [
        "w = clf.coef_\n",
        "wa, wb = clf.coef_[0,0], clf.coef_[0,1]\n",
        "inter = clf.intercept_\n",
        "print(w,inter)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-5.70738571e-05 -3.33325456e+00]] [2.33359367]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "pj6Az_AK3yH8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "outputId": "ad983542-5ccc-4e98-a34d-07b0bdc59649"
      },
      "cell_type": "code",
      "source": [
        "setosa = X[y==1]\n",
        "not_setosa = X[y==-1]\n",
        "\n",
        "t1, t2 = setosa[0,0], setosa[0,1]\n",
        "breq = -(wa*t1 + wb*t2)\n",
        "if breq > inter:\n",
        "    greater_flag = True\n",
        "else:\n",
        "    greater_flag = False\n",
        "\n",
        "if greater_flag:\n",
        "    seto = [-(wa*t[0] + wb*t[1]) for t in setosa]\n",
        "    low = min(seto)\n",
        "    \n",
        "    nots = [-(wa*t[0] + wb*t[1]) for t in not_setosa]\n",
        "    high = max(nots)\n",
        "else:\n",
        "    seto = [-(wa*t[0] + wb*t[1]) for t in setosa]\n",
        "    high = max(seto)\n",
        "    \n",
        "    nots = [-(wa*t[0] + wb*t[1]) for t in not_setosa]\n",
        "    low = min(nots)\n",
        "\n",
        "    \n",
        "setosa_non_support = setosa.copy()\n",
        "setosa_support = []\n",
        "not_setosa_non_support = not_setosa.copy()\n",
        "not_setosa_support = []\n",
        "\n",
        "sv = clf.support_vectors_\n",
        "\n",
        "for i in range(len(sv)):\n",
        "    if any((setosa_non_support[:]==sv[i]).all(1)):\n",
        "        np.delete(setosa_non_support, sv[i])\n",
        "        setosa_support.append(sv[i])\n",
        "    else:\n",
        "        np.delete(not_setosa_non_support, sv[i])\n",
        "        not_setosa_support.append(sv[i])\n",
        "#setosa_non_support = np.array(setosa_non_support)\n",
        "setosa_support = np.array(setosa_support)\n",
        "#not_setosa_non_support = np.array(not_setosa_non_support)\n",
        "not_setosa_support = np.array(not_setosa_support)\n",
        "    \n",
        "plt.scatter(setosa_non_support[:,0],setosa_non_support[:,1],c='b')\n",
        "plt.scatter(not_setosa_non_support[:,0],not_setosa_non_support[:,1],c='g')\n",
        "\n",
        "plt.scatter(setosa_support[:,0],setosa_support[:,1],c='b',marker='s')\n",
        "plt.scatter(not_setosa_support[:,0],not_setosa_support[:,1],c='g',marker='s')\n",
        "\n",
        "\n",
        "\n",
        "plt.xlabel('sepal length (cm)')\n",
        "plt.ylabel('petal width (cm)')\n",
        "a1 = [4+i*0.4 for i in range(11)]\n",
        "a2 = [(-inter - wa * a1[i])/wb for i in range(len(a1))]\n",
        "plt.plot(a1,a2,c='k')\n",
        "a3 = [(-low - wa * a1[i])/wb for i in range(len(a1))]\n",
        "a4 = [(-high - wa * a1[i])/wb for i in range(len(a1))]\n",
        "plt.plot(a1,a3,'--',c='m')\n",
        "plt.plot(a1,a4,'--',c='m')\n",
        "plt.show()"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:37: DeprecationWarning: using a non-integer array as obj in delete will result in an error in the future\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:34: DeprecationWarning: using a non-integer array as obj in delete will result in an error in the future\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "nsWEQXJjAWR5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "8185d671-8a0b-4573-a6ca-7faf612e13cb"
      },
      "cell_type": "code",
      "source": [
        "print(len(setosa_support), len(not_setosa_support))\n",
        "newx = np.vstack((setosa_support, not_setosa_support))\n",
        "newy = [1]*7+[-1]*7\n",
        "clf = SVC(kernel='linear',random_state=42, tol=1e-5)\n",
        "clf.fit(X,y)"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7 7\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto_deprecated',\n",
              "  kernel='linear', max_iter=-1, probability=False, random_state=42,\n",
              "  shrinking=True, tol=1e-05, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 77
        }
      ]
    },
    {
      "metadata": {
        "id": "A32viuFMBTLz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "863a40a9-937d-4689-d442-3fe405fffc35"
      },
      "cell_type": "code",
      "source": [
        "clf.coef_, clf.intercept_"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[-5.70738571e-05, -3.33325456e+00]]), array([2.33359367]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "metadata": {
        "id": "BrOek0OABfB7",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "As we can see, the decision boundary remains the same. This is because the support vectors are the points that decide e decision boundary."
      ]
    },
    {
      "metadata": {
        "id": "fDm5L40VbknY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "outputId": "399b15e8-5c34-403c-a133-6c2c39e67787"
      },
      "cell_type": "code",
      "source": [
        "#train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "for i in sv:\n",
        "    print(any((not_setosa[:]==i).all(1)))\n",
        "type(sv)\n",
        "## Reference for checking row existance\n",
        "##  https://stackoverflow.com/questions/14766194/testing-whether-a-numpy-array-contains-a-given-row"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n",
            "True\n",
            "True\n",
            "True\n",
            "True\n",
            "True\n",
            "True\n",
            "False\n",
            "False\n",
            "False\n",
            "False\n",
            "False\n",
            "False\n",
            "False\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    }
  ]
}